{"version":3,"sources":["utils/utils.js","utils/api.js","pages/Home.js","utils/titles.js","components/ClanDetails/ClanTitles/MemberRow.js","components/ClanDetails/ClanTitles/TitleTable.js","pages/ClanTitles.js","pages/ClanStats.js","components/ClanDetails/ClanDetailsHeader.js","pages/ClanDetails.js","App.js","serviceWorker.js","index.js"],"names":["checkDates","date1","date2","getMonth","getYear","getDate","m","y","Date","formatDate","date","monthIndex","year","getFullYear","createCharactersMap","profile","atDate","Object","keys","characters","data","map","characterId","i","filter","c","dateLastPlayed","dotenv","config","apiKey","process","apiURL","baseURL","getActivities","character","count","mode","page","arguments","length","undefined","rest","Promise","resolve","reject","queryParams","queryString","stringify","fetch","concat","membershipType","membershipId","method","headers","X-API-Key","then","response","status","json","Response","activities","lastDate","period","catch","err","console","log","Home","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isLoading","clanName","submitName","bind","assertThisInitialized","name","_this2","params","groupName","groupType","body","JSON","detail","groupId","history","push","_this3","react_default","a","createElement","className","placeholder","onChange","e","setState","target","value","onKeyPress","key","React","Component","contextTypes","router","PropTypes","object","withRouter","getRaidCount","member","userInfo","displayName","raidCount","raidMap","all","activitiesResponse","allActivites","reduce","acc","val","forEach","activity","activityDate","values","completed","basic","completionReason","displayValue","getCrucibleWins","crucibleWins","pvpMap","standing","efficiency","getGambitWins","gambitWins","gambitMap","getStrikeCount","strikeCount","strikeMap","getIBWins","ibWins","MemberRow","_this$props","rank","TitleTable","setCounts","p","memberProfiles","reqFunction","memberMap","counts","newProps","title","description","_this$state","sortedMembers","sort","b","MemberRow_MemberRow","ClanTitles","activeDate","TitleTable_TitleTable","ClanStats","tableLoading","memberStats","tableStats","activeMode","label","activeStat","modeOptions","statPvPOptions","statPvEOptions","sortData","requestStats","memberStatsRequests","player","destinyMembershipId","groups","type","id","playerName","stats","sortedStats","r","mergedAllCharacters","results","allPvP","allTime","activitiesEntered","newMode","newStat","stat","_this$state2","statOptions","dist_default","options","s","ClanDetailsHeader","generateMonthList","months","currentDate","limit","clanDetail","changeDate","activePage","dateString","clanInfo","clanCallsign","onClick","navigateToPage","ClanDetails","currentPage","getClanMembers","match","memberProfileRequests","components","getProfile","destinyUserInfo","newDate","_this$props$match$par","ClanDetails_ClanDetailsHeader","pages_ClanTitles","pages_ClanStats","App","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cc01b8ef.chunk.js","sourcesContent":["export let checkDates = (date1, date2) => {\r\n    return date1.getMonth() === date2.getMonth() && date1.getYear() === date2.getYear()\r\n}\r\n\r\nexport let isNewerDate =(date1, date2) => {\r\n    return date1.getYear() > date2.getYear() || (date1.getYear() === date2.getYear() && date1.getMonth() > date2.getMonth())\r\n}\r\n\r\nexport let isNewerOrEqualDate =(date1, date2) => {\r\n    return date1.getYear() > date2.getYear() || (date1.getYear() === date2.getYear() && date1.getMonth() >= date2.getMonth())\r\n}\r\n\r\nexport let isNewerOrEqualDateWithDay =(date1, date2) => {\r\n    return date1.getYear() > date2.getYear() || \r\n            (date1.getYear() === date2.getYear() && date1.getMonth() > date2.getMonth()) ||\r\n            (date1.getYear() === date2.getYear() && date1.getMonth() === date2.getMonth() && date1.getDate() >= date2.getDate())\r\n}\r\n\r\nexport let getDate = (m, y) => {\r\n    let monthNames = [\r\n        \"January\", \"February\", \"March\",\r\n        \"April\", \"May\", \"June\", \"July\",\r\n        \"August\", \"September\", \"October\",\r\n        \"November\", \"December\"\r\n    ]\r\n\r\n    return new Date(monthNames[m] + ' ' + y)\r\n} \r\n\r\nexport let formatDate = (date) => {\r\n    let monthNames = [\r\n      \"January\", \"February\", \"March\",\r\n      \"April\", \"May\", \"June\", \"July\",\r\n      \"August\", \"September\", \"October\",\r\n      \"November\", \"December\"\r\n    ]\r\n  \r\n    let monthIndex = date.getMonth();\r\n    let year = date.getFullYear();\r\n  \r\n    return monthNames[monthIndex] + ' ' + year;\r\n}\r\n\r\nexport let createCharactersMap = (profile, atDate) => {\r\n    let characters = Object.keys(profile.characters.data).map((characterId, i) => {\r\n        return profile.characters.data[characterId]\r\n    })\r\n    return characters.filter((c) => isNewerOrEqualDate(new Date(c.dateLastPlayed), atDate))\r\n}","import dotenv from 'dotenv';\r\nimport queryString from 'query-string';\r\nimport { checkDates, isNewerDate } from './utils';\r\n\r\ndotenv.config()\r\n\r\nconst apiKey = process.env.REACT_APP_BUNGIE_API_KEY;\r\nconst baseURL = 'https://www.bungie.net';\r\nconst apiURL = baseURL+'/Platform';\r\nconst statsURL = 'https://stats.bungie.net/Platform'\r\n\r\nexport let getProfile = (type, id, components) => new Promise((resolve, reject) => {\r\n\r\n    let queryParams = queryString.stringify({components: components});\r\n\r\n    fetch(`${apiURL}/Destiny2/${type}/Profile/${id}/?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Profile. Status Code: ' + response.status);\r\n            reject('Error Performing GET Profile.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getProfile : ', id, ' : ', err);\r\n        reject('Fetch Error : getProfile');\r\n    });\r\n})\r\n\r\nexport let getHistoricalStatsForAccount = (player, destinyMembershipId, membershipType, groups) => new Promise((resolve, reject) => {\r\n\r\n    let queryParams = queryString.stringify({groups});\r\n\r\n    fetch(` ${apiURL}/Destiny2/${membershipType}/Account/${destinyMembershipId}/Stats/?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            // console.log('Error Performing GET Activities. Status Code: ' + response.status);\r\n            // reject('Error Performing GET Activities.');\r\n            // If a profile is private it will 500, so just resolve for now.\r\n            resolve()\r\n        } else {\r\n            response.json().then((data) => {\r\n                resolve({playerName: player, stats: data.Response})\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getHistoricalStatsForAccount : ', err);\r\n        reject('Fetch Error : getHistoricalStatsForAccount');\r\n    });\r\n})\r\n\r\nexport let getActivities = (character, count, mode, page, date=null, rest=[]) => new Promise((resolve, reject) => {\r\n\r\n    let queryParams = queryString.stringify({count: count, mode: mode, page: page});\r\n\r\n    fetch(` ${apiURL}/Destiny2/${character.membershipType}/Account/${character.membershipId}/Character/${character.characterId}/Stats/Activities/?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            // console.log('Error Performing GET Activities. Status Code: ' + response.status);\r\n            // reject('Error Performing GET Activities.');\r\n            // If a profile is private it will 500, so just resolve for now.\r\n            resolve(rest)\r\n        } else {\r\n            response.json().then((data) => {\r\n                if (data.Response && data.Response.activities && data.Response.activities.length > 0) {\r\n                    const lastDate = new Date(data.Response.activities[data.Response.activities.length-1].period)\r\n                    if (date && checkDates(date, lastDate)) {\r\n                        resolve(getActivities(character, count, mode, page+1, date, rest.concat(data.Response.activities)))\r\n                    } else if (date && isNewerDate(lastDate, date)) {\r\n                        resolve(getActivities(character, count, mode, page+1, date))\r\n                    } else {\r\n                        resolve(rest.concat(data.Response.activities))\r\n                    }\r\n                } else {\r\n                    resolve(data.Response)\r\n                }\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getActivities : ', err);\r\n        reject('Fetch Error : getActivities');\r\n        // Instead of reject. Try again. Sometimes a request will randomly timeout. TODO: Add back-off.\r\n        // resolve(getActivities(character, count, mode, page, date, rest))\r\n    });\r\n})\r\n\r\nexport let searchClans = (name) => new Promise((resolve, reject) => {\r\n\r\n    let params = {\r\n        groupName: name, \r\n        groupType: 1\r\n    }\r\n\r\n    fetch(` ${apiURL}/GroupV2/NameV2/`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(params),\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing POST GroupSearch. Status Code: ' + response.status);\r\n            reject('Error Performing POST GroupSearch.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : searchClans : ', err);\r\n        reject('Fetch Error : searchClans');\r\n    });\r\n})\r\n\r\nexport let getClan = (groupId) => new Promise((resolve, reject) => {\r\n\r\n    fetch(`${apiURL}/GroupV2/${groupId}/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Clan. Status Code: ' + response.status);\r\n            reject('Error Performing GET Clan.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getClan : ', err);\r\n        reject('Fetch Error : getClan');\r\n    });\r\n})\r\n\r\nexport let getClanMembers = (groupId) => new Promise((resolve, reject) => {\r\n\r\n    let queryParams = queryString.stringify({currentPage: 1});\r\n\r\n    fetch(`${apiURL}/GroupV2/${groupId}/Members/?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Clan Members. Status Code: ' + response.status);\r\n            reject('Error Performing GET Clan Members.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getClanMembers : ', err);\r\n        reject('Fetch Error : getClanMembers');\r\n    });\r\n})\r\n\r\nexport let getClanLeaderboards = (groupId, maxtop, modes, statid) => new Promise((resolve, reject) => {\r\n\r\n    let queryParams = queryString.stringify({maxtop, modes, statid});\r\n\r\n    fetch(` ${apiURL}/Destiny2/Stats/Leaderboards/Clans/${groupId}/?${queryParams}`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Clan Leaderboards. Status Code: ' + response.status);\r\n            reject('Error Performing GET Clan Leaderboards.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                resolve(data.Response)\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getClanLeaderboards : ', err);\r\n        reject('Fetch Error : getClanLeaderboards');\r\n    });\r\n})\r\n\r\nexport let getManifest = () => new Promise((resolve, reject) => {\r\n\r\n    fetch(`${apiURL}/Destiny2/Manifest/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Manifest. Status Code: ' + response.status);\r\n            reject('Error Performing GET Manifest.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getManifest : ', err);\r\n        reject('Fetch Error : getManifest');\r\n    });\r\n})\r\n\r\nexport let getFromHash = (entityType, hash) => new Promise((resolve, reject) => {\r\n\r\n    fetch(`${apiURL}/Destiny2/Manifest/${entityType}/${hash}/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET Entity. Status Code: ' + response.status);\r\n            reject('Error Performing GET Entity.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getFromHash : ', err);\r\n        reject('Fetch Error : getFromHash');\r\n    });\r\n})\r\n\r\nexport let getPGCR = (activityId) => new Promise((resolve, reject) => {\r\n\r\n    fetch(`${statsURL}/Destiny2/Stats/PostGameCarnageReport/${activityId}/`, {\r\n        method: 'GET',\r\n        headers: {\r\n            \"X-API-Key\": apiKey\r\n        }\r\n    })\r\n    .then((response) => {\r\n        if (response.status !== 200) {\r\n            console.log('Error Performing GET PGCR. Status Code: ' + response.status);\r\n            reject('Error Performing GET PGCR.');\r\n        } else {\r\n            response.json().then((data) => {\r\n                // console.log(\"PGCR: \", data);\r\n                resolve(data.Response);\r\n            });\r\n        }\r\n    })\r\n    .catch((err) => {\r\n        console.log('Fetch Error : getPGCR : ', err);\r\n        reject('Fetch Error : getPGCR');\r\n    });\r\n})","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { searchClans } from '../utils/api';\r\n\r\nimport '../style/Home.css';\r\n\r\nclass Home extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoading: false,\r\n            clanName: \"\"\r\n        }\r\n\r\n        this.submitName = this.submitName.bind(this)\r\n    }\r\n\r\n    submitName() {\r\n\r\n        const { clanName } = this.state\r\n\r\n        searchClans(clanName)\r\n        .then(response => {\r\n            if (response && response.detail && response.detail.groupId) {\r\n                this.props.history.push(`/c/${response.detail.groupId}/titles`)\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoading } = this.state;\r\n\r\n        const home = (\r\n            isLoading ? <div className='loading'></div> :\r\n            <div className='home'>\r\n                <div className='home-content'>\r\n                    <div className='home-title'> Destiny 2 Clan Titles </div>\r\n                    <div className='home-subtitle'> Compete with your clanmates for activity based titles. </div>\r\n                    <div className='search-container'>\r\n                        <input className='search-field' \r\n                            placeholder='Enter Clan Name' \r\n                            onChange={e => {this.setState({clanName: e.target.value})}}\r\n                            onKeyPress={e => {\r\n                                if (e.key === 'Enter') {\r\n                                    this.submitName()\r\n                                }\r\n                            }}\r\n                        />\r\n                        <div className='press-enter'> Press Enter to Search </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        return (home);\r\n    }\r\n}\r\n\r\nHome.propTypes = {\r\n    children: PropTypes.node,\r\n    router: PropTypes.object,\r\n    location: PropTypes.object,\r\n    history: PropTypes.any\r\n}\r\n\r\nHome.contextTypes = {\r\n    router: PropTypes.object\r\n}\r\n\r\nexport default withRouter(Home);","import { getActivities, getFromHash, getPGCR } from './api';\r\nimport { checkDates, createCharactersMap, isNewerOrEqualDateWithDay } from './utils';\r\n\r\nlet knownWeapons = {}\r\nlet knownPGCRs = {}\r\n\r\nexport let getRaidCount = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n    let name = member.profile.data.userInfo.displayName\r\n    let raidCount = 0\r\n\r\n    let characters = createCharactersMap(member, atDate)\r\n    let raidMap = characters.map((character) => {\r\n        return getActivities(character, 50, 4, 0, atDate)\r\n    })\r\n    let results = Promise.all(raidMap)\r\n    results.then(activitiesResponse => {\r\n        let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n        if (allActivites.length > 0) {\r\n            allActivites.forEach((activity) => {\r\n                if (activity) {\r\n                    const activityDate = new Date(activity.period)\r\n                    if (checkDates(activityDate, atDate) &&\r\n                        activity.values.completed.basic.value === 1 &&\r\n                        activity.values.completionReason.basic.displayValue !== 'Failed') {\r\n                        raidCount = raidCount + 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        resolve({name, count: raidCount})\r\n    })  \r\n    .catch((err) => {\r\n        console.log('GET Raid Activities Error : ', name, err);\r\n        resolve({name, count: raidCount})\r\n    });\r\n})\r\n\r\nexport let getCrucibleWins = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n    let name = member.profile.data.userInfo.displayName\r\n    let crucibleWins = 0\r\n\r\n    let characters = createCharactersMap(member, atDate)\r\n    let pvpMap = characters.map((character) => {\r\n        return getActivities(character, 200, 5, 0, atDate)\r\n    })\r\n    let results = Promise.all(pvpMap)\r\n    results.then(activitiesResponse => {\r\n        let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n        if (allActivites.length > 0) {\r\n            allActivites.forEach((activity) => {\r\n                if (activity) {\r\n                    const activityDate = new Date(activity.period)\r\n                    if (checkDates(activityDate, atDate) &&\r\n                        activity.values.completed.basic.value === 1 &&\r\n                        activity.values.standing.basic.value === 0 &&\r\n                        activity.values.efficiency.basic.value !== 0) {\r\n                        crucibleWins = crucibleWins + 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        resolve({name, count: crucibleWins})\r\n    })\r\n    .catch((err) => {\r\n        console.log('GET Crucible Activities Error : ', name, err);\r\n        // reject('GET Activities Error');\r\n        resolve({name, count: crucibleWins})\r\n    });\r\n})\r\n\r\n\r\nexport let getGambitWins = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n    let name = member.profile.data.userInfo.displayName\r\n    let gambitWins = 0\r\n\r\n    let characters = createCharactersMap(member, atDate)\r\n    let gambitMap = characters.map((character) => {\r\n        return getActivities(character, 100, 64, 0, atDate)\r\n    })\r\n    let results = Promise.all(gambitMap)\r\n    results.then(activitiesResponse => {\r\n        let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n        if (allActivites.length > 0) {\r\n            allActivites.forEach((activity) => {\r\n                if (activity) {\r\n                    const activityDate = new Date(activity.period)\r\n                    if (checkDates(activityDate, atDate) &&\r\n                        activity.values.completed.basic.value === 1 &&\r\n                        activity.values.standing.basic.value === 0 &&\r\n                        activity.values.efficiency.basic.value !== 0) {\r\n                            gambitWins = gambitWins + 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        resolve({name, count: gambitWins})\r\n    })\r\n    .catch((err) => {\r\n        console.log('GET Gambit Activities Error : ', name, err);\r\n        // reject('GET Activities Error');\r\n        resolve({name, count: gambitWins})\r\n    });\r\n})\r\n\r\nexport let getStrikeCount = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n    let name = member.profile.data.userInfo.displayName\r\n    let strikeCount = 0\r\n\r\n    let characters = createCharactersMap(member, atDate)\r\n    let strikeMap = characters.map((character) => {\r\n        return getActivities(character, 100, 18, 0, atDate)\r\n    })\r\n    let results = Promise.all(strikeMap)\r\n    results.then(activitiesResponse => {\r\n        let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n        if (allActivites.length > 0) {\r\n            allActivites.forEach((activity) => {\r\n                if (activity) {\r\n                    const activityDate = new Date(activity.period)\r\n                    if (checkDates(activityDate, atDate) &&\r\n                        activity.values.completed.basic.value === 1 &&\r\n                        activity.values.efficiency.basic.value > 0) {\r\n                        strikeCount = strikeCount + 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        resolve({name, count: strikeCount})\r\n    })\r\n    .catch((err) => {\r\n        console.log('GET Strikes Activities Error : ', name, err);\r\n        // reject('GET Activities Error');\r\n        resolve({name, count: strikeCount})\r\n    });  \r\n})\r\n\r\nexport let getIBWins = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n    let name = member.profile.data.userInfo.displayName\r\n    let ibWins = 0\r\n\r\n    let characters = createCharactersMap(member, atDate)\r\n    let pvpMap = characters.map((character) => {\r\n        return getActivities(character, 200, 19, 0, atDate)\r\n    })\r\n    let results = Promise.all(pvpMap)\r\n    results.then(activitiesResponse => {\r\n        let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n        if (allActivites.length > 0) {\r\n            allActivites.forEach((activity) => {\r\n                if (activity) {\r\n                    const activityDate = new Date(activity.period)\r\n                    if (isNewerOrEqualDateWithDay(activityDate, atDate) &&\r\n                        activity.values.completed.basic.value === 1 &&\r\n                        activity.values.standing.basic.value === 0 &&\r\n                        activity.values.efficiency.basic.value !== 0) {\r\n                            ibWins = ibWins + 1\r\n                    }\r\n                }\r\n            })\r\n        }\r\n        resolve({name, count: ibWins})\r\n    })\r\n    .catch((err) => {\r\n        console.log('GET IB Activities Error : ', name, err);\r\n        // reject('GET Activities Error');\r\n        resolve({name, count: ibWins})\r\n    });\r\n})\r\n\r\n// export let getMenagerieCount = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n//     let name = member.profile.data.userInfo.displayName\r\n//     let menagerieCount = 0\r\n\r\n//     let characters = createCharactersMap(member, atDate)\r\n//     let menagerieMap = characters.map((character) => {\r\n//         return getActivities(character, 50, 77, 0, atDate)\r\n//     })\r\n//     let results = Promise.all(menagerieMap)\r\n//     results.then(activitiesResponse => {\r\n//         let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n//         if (allActivites.length > 0) {\r\n//             allActivites.forEach((activity) => {\r\n//                 if (activity) {\r\n//                     const activityDate = new Date(activity.period)\r\n//                     if (checkDates(activityDate, atDate) &&\r\n//                         activity.values.completed.basic.value === 1 &&\r\n//                         activity.values.completionReason.basic.displayValue !== 'Failed') {\r\n//                         menagerieCount = menagerieCount + 1\r\n//                     }\r\n//                 }\r\n//             })\r\n//         }\r\n//         resolve({name, count: menagerieCount})\r\n//     })  \r\n//     .catch((err) => {\r\n//         console.log('GET Menagerie Activities Error : ', name, err);\r\n//         resolve({name, count: menagerieCount})\r\n//     });\r\n// })\r\n\r\n// export let getCoSCount = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n//     let name = member.profile.data.userInfo.displayName\r\n//     let raidCount = 0\r\n\r\n//     let characters = createCharactersMap(member, atDate)\r\n//     let raidMap = characters.map((character) => {\r\n//         return getActivities(character, 50, 4, 0, atDate)\r\n//     })\r\n//     let results = Promise.all(raidMap)\r\n//     results.then(activitiesResponse => {\r\n//         let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n//         if (allActivites.length > 0) {\r\n//             let activityNames = []\r\n//                 allActivites.forEach((activity) => {\r\n//                 if (activity) {\r\n//                     const activityDate = new Date(activity.period)\r\n//                     if (checkDates(activityDate, atDate) &&\r\n//                         activity.values.completed.basic.value === 1 &&\r\n//                         activity.values.completionReason.basic.displayValue !== 'Failed') {\r\n//                         activityNames.push(getFromHash(\"DestinyActivityDefinition\", activity.activityDetails.directorActivityHash))\r\n//                     }\r\n//                 }\r\n//             })\r\n//             if (activityNames.length === 0) { resolve({name, count: raidCount}) }\r\n//             else {\r\n//                 let names = Promise.all(activityNames)\r\n//                 names.then(hashResponse => {\r\n//                     hashResponse.forEach((a) => {\r\n//                         if (a) {\r\n//                             let name = a.displayProperties.name\r\n//                             if (name === \"Crown of Sorrow: Normal\") {\r\n//                                 raidCount = raidCount + 1\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                     resolve({name, count: raidCount})\r\n//                 })\r\n//                 .catch((err) => {\r\n//                     console.log('GET CoS Raid Activity Hash Error : ', name, err);\r\n//                     resolve({name, count: raidCount})\r\n//                 });\r\n//             }\r\n//         }\r\n//         else { resolve({name, count: raidCount}) }\r\n//     })  \r\n//     .catch((err) => {\r\n//         console.log('GET CoS Raid Activities Error : ', name, err);\r\n//         resolve({name, count: raidCount})\r\n//     });\r\n// })\r\n\r\n// export let getPvPSniperKills = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n//     let name = member.profile.data.userInfo.displayName\r\n//     let sniperKills = 0\r\n\r\n//     let characters = createCharactersMap(member, atDate)\r\n//     let pvpMap = characters.map((character) => {\r\n//         return getActivities(character, 200, 5, 0, atDate)\r\n//     })\r\n//     let results = Promise.all(pvpMap)\r\n//     results.then(activitiesResponse => {\r\n//         let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n//         if (allActivites.length > 0) {\r\n//             let PGCRPromises = []\r\n//             let allPGCRs = []\r\n//             allActivites.forEach((activity) => {\r\n//                 if (activity) {\r\n//                     // console.log(activity);\r\n//                     const activityDate = new Date(activity.period)\r\n//                     if (checkDates(activityDate, atDate) && activity.values.efficiency.basic.value !== 0) {\r\n//                         if (knownPGCRs[activity.activityDetails.instanceId]) { allPGCRs.push(knownPGCRs[activity.activityDetails.instanceId]) }\r\n//                         else { PGCRPromises.push(getPGCR(activity.activityDetails.instanceId)) }\r\n//                     }\r\n//                 }\r\n//             })\r\n//             if (allPGCRs.length === 0 && PGCRPromises.length === 0) { resolve({name, count: sniperKills}) }\r\n//             else {\r\n//                 let PGCRs = Promise.all(PGCRPromises)\r\n//                 PGCRs.then(PGCRResponse => {\r\n//                     let weaponKills = {}\r\n//                     allPGCRs = allPGCRs.concat(PGCRResponse)\r\n//                     allPGCRs.forEach((pgcr) => {\r\n//                         if (pgcr) {\r\n//                             if (!knownPGCRs[pgcr.activityDetails.instanceId]) { knownPGCRs[pgcr.activityDetails.instanceId] = pgcr }\r\n//                             let player = pgcr.entries.filter((entry) => { return entry.player.destinyUserInfo.membershipId === member.profile.data.userInfo.membershipId })[0]\r\n//                             // console.log(player)\r\n//                             if (player.extended.weapons) {\r\n//                                 player.extended.weapons.forEach((weapon) => {\r\n//                                     if (knownWeapons[weapon.referenceId] && knownWeapons[weapon.referenceId] === \"Sniper Rifle\") {\r\n//                                         sniperKills += weapon.values.uniqueWeaponKills.basic.value\r\n//                                     } else if (knownWeapons[weapon.referenceId] && knownWeapons[weapon.referenceId] !== \"Sniper Rifle\") {\r\n//                                         // ignore weapon\r\n//                                     } else {\r\n//                                         if (weaponKills[weapon.referenceId]) { \r\n//                                             weaponKills[weapon.referenceId] += weapon.values.uniqueWeaponKills.basic.value\r\n//                                         } else {\r\n//                                             weaponKills[weapon.referenceId] = weapon.values.uniqueWeaponKills.basic.value\r\n//                                         }\r\n//                                     }\r\n//                                 })\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                     let weaponHashPromises = []\r\n//                     Object.keys(weaponKills).forEach((key) => { weaponHashPromises.push(getFromHash(\"DestinyInventoryItemDefinition\", key)) })\r\n//                     if (weaponHashPromises.length === 0) { resolve({name, count: sniperKills}) }\r\n//                     else {\r\n//                         let weaponData = Promise.all(weaponHashPromises)\r\n//                         weaponData.then((weaponDataResponse) => {\r\n//                             weaponDataResponse.forEach((weapon) => {\r\n//                                 // console.log(weapon)\r\n//                                 knownWeapons[weapon.hash] = weapon.itemTypeDisplayName\r\n//                                 if (weapon.itemTypeDisplayName === \"Sniper Rifle\") { sniperKills += weaponKills[weapon.hash] }\r\n//                             })\r\n//                             resolve({name, count: sniperKills})\r\n//                         })\r\n//                         .catch((err) => {\r\n//                             console.log('GET Weapon Data Error : ', name, err);\r\n//                             resolve({name, count: sniperKills})\r\n//                         });\r\n//                     }\r\n//                 })\r\n//                 .catch((err) => {\r\n//                     console.log('GET PGCR Error : ', name, err);\r\n//                     resolve({name, count: sniperKills})\r\n//                 });\r\n//             }\r\n//         }\r\n//         else { resolve({name, count: sniperKills}) }\r\n//     })\r\n//     .catch((err) => {\r\n//         console.log('GET Crucible Sniper Activities Error : ', name, err);\r\n//         // reject('GET Activities Error');\r\n//         resolve({name, count: sniperKills})\r\n//     });\r\n// })\r\n\r\n// export let getLoWKills = (member, atDate) => new Promise((resolve, reject) => {\r\n\r\n//     let name = member.profile.data.userInfo.displayName\r\n//     let lowKills = 0\r\n\r\n//     let characters = createCharactersMap(member, atDate)\r\n//     let pvpMap = characters.map((character) => {\r\n//         return getActivities(character, 200, 5, 0, atDate)\r\n//     })\r\n//     let results = Promise.all(pvpMap)\r\n//     results.then(activitiesResponse => {\r\n//         let allActivites = activitiesResponse.reduce((acc, val) => acc.concat(val), []);\r\n//         if (allActivites.length > 0) {\r\n//             let PGCRPromises = []\r\n//             let allPGCRs = []\r\n//             allActivites.forEach((activity) => {\r\n//                 if (activity) {\r\n//                     // console.log(activity);\r\n//                     const activityDate = new Date(activity.period)\r\n//                     if (checkDates(activityDate, atDate) && activity.values.efficiency.basic.value !== 0) {\r\n//                         if (knownPGCRs[activity.activityDetails.instanceId]) { allPGCRs.push(knownPGCRs[activity.activityDetails.instanceId]) }\r\n//                         else { PGCRPromises.push(getPGCR(activity.activityDetails.instanceId)) }\r\n//                     }\r\n//                 }\r\n//             })\r\n//             if (allPGCRs.length === 0 && PGCRPromises.length === 0) { resolve({name, count: lowKills}) }\r\n//             else {\r\n//                 let PGCRs = Promise.all(PGCRPromises)\r\n//                 PGCRs.then(PGCRResponse => {\r\n//                     allPGCRs = allPGCRs.concat(PGCRResponse)\r\n//                     allPGCRs.forEach((pgcr) => {\r\n//                         if (pgcr) {\r\n//                             if (!knownPGCRs[pgcr.activityDetails.instanceId]) { knownPGCRs[pgcr.activityDetails.instanceId] = pgcr }\r\n//                             let player = pgcr.entries.filter((entry) => { return entry.player.destinyUserInfo.membershipId === member.profile.data.userInfo.membershipId })[0]\r\n//                             if (player.extended.weapons) {\r\n//                                 player.extended.weapons.forEach((weapon) => {\r\n//                                     if (weapon.referenceId === 3413860063) {\r\n//                                         lowKills += weapon.values.uniqueWeaponKills.basic.value\r\n//                                     }\r\n//                                 })\r\n//                             }\r\n//                         }\r\n//                     })\r\n//                     resolve({name, count: lowKills})\r\n//                 })\r\n//                 .catch((err) => {\r\n//                     console.log('GET PGCR Error : ', name, err);\r\n//                     resolve({name, count: lowKills})\r\n//                 });\r\n//             }\r\n//         }\r\n//         else { resolve({name, count: lowKills}) }\r\n//     })\r\n//     .catch((err) => {\r\n//         console.log('GET Crucible Sniper Activities Error : ', name, err);\r\n//         // reject('GET Activities Error');\r\n//         resolve({name, count: lowKills})\r\n//     });\r\n// })","import React from 'react';\r\n\r\nimport '../../../style/ClanDetails.css';\r\n\r\nexport default class MemberRow extends React.Component {\r\n\r\n    render() {\r\n\r\n        const { rank, name, count } = this.props\r\n\r\n        const row = (\r\n            <div className='member-row'>\r\n                <div className='row-left-side'>\r\n                    <div className='row-rank'>{rank}</div>\r\n                    <div className='row-name'>{name}</div>\r\n                </div>\r\n                <div>{count}</div>\r\n            </div>\r\n        );\r\n\r\n        return (row);\r\n    }\r\n}","import React from 'react';\r\n\r\nimport '../../../style/ClanDetails.css';\r\n\r\nimport MemberRow from './MemberRow';\r\n\r\nexport default class TitleTable extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            counts: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setCounts(this.props)\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.setState({isLoading: true})\r\n        this.setCounts(newProps)\r\n    }\r\n\r\n    setCounts = (p) => {\r\n        const { memberProfiles, atDate, reqFunction } = p\r\n        let memberMap = memberProfiles.map((member) => {\r\n            return reqFunction(member, atDate)\r\n        })\r\n        Promise.all(memberMap)\r\n        .then(response => {\r\n            this.setState({isLoading: false, counts: response})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { title, description } = this.props\r\n        const { isLoading, counts } = this.state\r\n        let sortedMembers = counts.sort(function(a,b){return b.count-a.count})\r\n\r\n        const table = (\r\n            <div className='title-table'>\r\n                <div className='table-header'> \r\n                    <div>{title}</div>\r\n                    <div className='table-sub-header'>{description}</div>\r\n                </div>\r\n                {isLoading ? <div className='loading'></div> :\r\n                <div className='table-content'>\r\n                    {sortedMembers.map((member, i) => {\r\n                        return <MemberRow key={i} rank={i+1} name={member.name} count={member.count} />\r\n                    })}\r\n                </div>}\r\n            </div>\r\n        );\r\n\r\n        return (table);\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { \r\n    getRaidCount, \r\n    getCrucibleWins, \r\n    getGambitWins, \r\n    getStrikeCount, \r\n    getIBWins } from '../utils/titles';\r\n\r\nimport '../style/ClanDetails.css';\r\n\r\nimport TitleTable from '../components/ClanDetails/ClanTitles/TitleTable';\r\n\r\nclass ClanTitles extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {}\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoading, activeDate, memberProfiles } = this.props\r\n\r\n        const titles = (\r\n            isLoading ? \r\n                <div className='loading'></div> \r\n            :\r\n                <div className='clan-details-scroll'>\r\n                    <div className='clan-details-content'>\r\n                        <TitleTable title=\"Raider\" description=\"Raids Completed.\" reqFunction={getRaidCount} memberProfiles={memberProfiles} atDate={activeDate} />\r\n                        <TitleTable title=\"Gladiator\" description=\"Wins in the Crucible.\" reqFunction={getCrucibleWins} memberProfiles={memberProfiles} atDate={activeDate} />\r\n                        <TitleTable title=\"Dredgen\" description=\"Wins in Gambit and Gambit Prime.\" reqFunction={getGambitWins} memberProfiles={memberProfiles} atDate={activeDate} />\r\n                        <TitleTable title=\"Vanguard\" description=\"Strikes and Nightfalls Completed.\" reqFunction={getStrikeCount} memberProfiles={memberProfiles} atDate={activeDate} />\r\n                        <TitleTable title=\"Iron Lord\" description=\"Wins in Iron Banner.\" reqFunction={getIBWins} memberProfiles={memberProfiles} atDate={new Date(\"2/18/2020\")} />\r\n                    </div>\r\n                </div>\r\n            );\r\n\r\n        return (titles);\r\n    }\r\n}\r\n\r\nClanTitles.propTypes = {\r\n    children: PropTypes.node,\r\n    router: PropTypes.object,\r\n    location: PropTypes.object,\r\n    history: PropTypes.any\r\n}\r\n\r\nClanTitles.contextTypes = {\r\n    router: PropTypes.object\r\n}\r\n\r\nexport default withRouter(ClanTitles);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Dropdown from 'react-dropdown';\r\nimport { getHistoricalStatsForAccount } from '../utils/api';\r\n\r\nimport '../style/ClanDetails.css';\r\nimport '../style/ClanStats.css';\r\n\r\nimport MemberRow from '../components/ClanDetails/ClanTitles/MemberRow';\r\n\r\nclass ClanStats extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            tableLoading: true,\r\n            memberStats: [],\r\n            tableStats:[],\r\n            activeMode: {label:'PvP', value:'allPvP'},\r\n            activeStat: {label:'Total Matches', value:'activitiesEntered'}\r\n        }\r\n\r\n        this.modeOptions = [\r\n            {label:'PvP', value:'allPvP'}, \r\n            {label:'PvE', value:'allPvE'}\r\n        ]\r\n        this.statPvPOptions = [\r\n            {label:'Total Matches', value:'activitiesEntered'},\r\n            {label:'Matches Won', value:'activitiesWon'},\r\n            {label:'Time Played', value:'secondsPlayed'},\r\n            {label:'Kills', value:'kills'},\r\n            {label:'Deaths', value:'deaths'},\r\n            {label:'Assists', value:'assists'},\r\n            {label:'Opponents Defeated', value:'opponentsDefeated'},\r\n            {label:'Average Kill Distance', value:'averageKillDistance'},\r\n            {label:'Longest Kill Distance', value:'longestKillDistance'},\r\n            {label:'Average Lifespan', value:'averageLifespan'},\r\n            {label:'Longest Life', value:'longestSingleLife'},\r\n            {label:'K/D', value:'killsDeathsRatio'},\r\n            {label:'KDA', value:'killsDeathsAssists'},\r\n            {label:'Efficiency', value:'efficiency'},\r\n            {label:'Kills (Single Game)', value:'bestSingleGameKills'},\r\n            {label:'Precision Kills', value:'precisionKills'},\r\n            {label:'Precision Kills (Single Game)', value:'mostPrecisionKills'},\r\n            {label:'Longest Spree', value:'longestKillSpree'},\r\n            {label:'Suicides', value:'suicides'},\r\n            {label:'Resurrections Performed', value:'resurrectionsPerformed'},\r\n            {label:'Resurrections Received', value:'resurrectionsReceived'},\r\n            {label:'Objectives Completed', value:'objectivesCompleted'},\r\n            {label:'Win/Loss', value:'winLossRatio'},\r\n            {label:'Orbs Dropped', value:'orbsDropped'},\r\n            {label:'Orbs Gathered', value:'orbsGathered'},\r\n            {label:'Biggest Quitter', value:'remainingTimeAfterQuitSeconds'},\r\n            {label:'Auto Rifle Kills', value:'weaponKillsAutoRifle'},\r\n            {label:'Beam Rifle Kills', value:'weaponKillsBeamRifle'},\r\n            {label:'Bow Kills', value:'weaponKillsBow'},\r\n            {label:'Fusion Rifle Kills', value:'weaponKillsFusionRifle'},\r\n            {label:'Grenade Launcher Kills', value:'weaponKillsGrenadeLauncher'},\r\n            {label:'Hand Cannon Kills', value:'weaponKillsHandCannon'},\r\n            {label:'Linear Fusion Rifle Kills', value:'weaponKillsTraceRifle'},\r\n            {label:'Machine Gun Kills', value:'weaponKillsMachineGun'},\r\n            {label:'Pulse Rifle Kills', value:'weaponKillsPulseRifle'},\r\n            {label:'Rocket Launcher Kills', value:'weaponKillsRocketLauncher'},\r\n            {label:'Scout Rifle Kills', value:'weaponKillsScoutRifle'},\r\n            {label:'Shotgun Kills', value:'weaponKillsShotgun'},\r\n            {label:'Sniper Kills', value:'weaponKillsSniper'},\r\n            {label:'SMG Kills', value:'weaponKillsSubmachinegun'},\r\n            {label:'Side Arm Kills', value:'weaponKillsSideArm'},\r\n            {label:'Sword Kills', value:'weaponKillsSword'},\r\n            {label:'Ability Kills', value:'weaponKillsAbility'},\r\n            {label:'Grenade Kills', value:'weaponKillsGrenade'},\r\n            {label:'Melee Kills', value:'weaponKillsMelee'},\r\n            {label:'Super Kills', value:'weaponKillsSuper'},\r\n            {label:'Relic Kills', value:'weaponKillsRelic'},\r\n            {label:'Best Weapon', value:'weaponBestType'}\r\n        ]\r\n        this.statPvEOptions = [\r\n            {label:'Total Activites', value:'activitiesEntered'},\r\n            {label:'Activities Cleared', value:'activitiesCleared'},\r\n            {label:'Time Played', value:'secondsPlayed'},\r\n            {label:'Public Events', value:'publicEventsCompleted'},\r\n            {label:'Heroic Public Events', value:'heroicPublicEventsCompleted'},\r\n            {label:'Adventures', value:'adventuresCompleted'},\r\n            {label:'Highest Light Level', value:'highestLightLevel'},\r\n            {label:'Kills', value:'kills'},\r\n            {label:'Deaths', value:'deaths'},\r\n            {label:'Assists', value:'assists'},\r\n            {label:'Opponents Defeated', value:'opponentsDefeated'},\r\n            {label:'Average Kill Distance', value:'averageKillDistance'},\r\n            {label:'Longest Kill Distance', value:'longestKillDistance'},\r\n            {label:'Average Lifespan', value:'averageLifespan'},\r\n            {label:'Longest Life', value:'longestSingleLife'},\r\n            {label:'K/D', value:'killsDeathsRatio'},\r\n            {label:'KDA', value:'killsDeathsAssists'},\r\n            {label:'Efficiency', value:'efficiency'},\r\n            {label:'Kills (Single Activity)', value:'bestSingleGameKills'},\r\n            {label:'Precision Kills', value:'precisionKills'},\r\n            {label:'Precision Kills (Single Activity)', value:'mostPrecisionKills'},\r\n            {label:'Longest Spree', value:'longestKillSpree'},\r\n            {label:'Suicides', value:'suicides'},\r\n            {label:'Resurrections Performed', value:'resurrectionsPerformed'},\r\n            {label:'Resurrections Received', value:'resurrectionsReceived'},\r\n            {label:'Objectives Completed', value:'objectivesCompleted'},\r\n            {label:'Score', value:'score'},\r\n            {label:'Orbs Dropped', value:'orbsDropped'},\r\n            {label:'Orbs Gathered', value:'orbsGathered'},\r\n            {label:'Biggest Quitter', value:'remainingTimeAfterQuitSeconds'},\r\n            {label:'Auto Rifle Kills', value:'weaponKillsAutoRifle'},\r\n            {label:'Beam Rifle Kills', value:'weaponKillsBeamRifle'},\r\n            {label:'Bow Kills', value:'weaponKillsBow'},\r\n            {label:'Fusion Rifle Kills', value:'weaponKillsFusionRifle'},\r\n            {label:'Grenade Launcher Kills', value:'weaponKillsGrenadeLauncher'},\r\n            {label:'Hand Cannon Kills', value:'weaponKillsHandCannon'},\r\n            {label:'Linear Fusion Rifle Kills', value:'weaponKillsTraceRifle'},\r\n            {label:'Machine Gun Kills', value:'weaponKillsMachineGun'},\r\n            {label:'Pulse Rifle Kills', value:'weaponKillsPulseRifle'},\r\n            {label:'Rocket Launcher Kills', value:'weaponKillsRocketLauncher'},\r\n            {label:'Scout Rifle Kills', value:'weaponKillsScoutRifle'},\r\n            {label:'Shotgun Kills', value:'weaponKillsShotgun'},\r\n            {label:'Sniper Kills', value:'weaponKillsSniper'},\r\n            {label:'SMG Kills', value:'weaponKillsSubmachinegun'},\r\n            {label:'Side Arm Kills', value:'weaponKillsSideArm'},\r\n            {label:'Sword Kills', value:'weaponKillsSword'},\r\n            {label:'Ability Kills', value:'weaponKillsAbility'},\r\n            {label:'Grenade Kills', value:'weaponKillsGrenade'},\r\n            {label:'Melee Kills', value:'weaponKillsMelee'},\r\n            {label:'Super Kills', value:'weaponKillsSuper'},\r\n            {label:'Relic Kills', value:'weaponKillsRelic'},\r\n            {label:'Best Weapon', value:'weaponBestType'}\r\n        ]\r\n\r\n        this.sortData = this.sortData.bind(this)\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { memberProfiles } = this.props;\r\n        this.requestStats(memberProfiles)\r\n    }\r\n\r\n    componentWillReceiveProps(props) {\r\n        const { memberProfiles } = props;\r\n        this.setState({tableLoading: true})\r\n        this.requestStats(memberProfiles)\r\n    }\r\n\r\n    requestStats(memberProfiles) {\r\n        let memberStatsRequests = memberProfiles.map((member) => {\r\n            let type = member.profile.data.userInfo.membershipType\r\n            let id = member.profile.data.userInfo.membershipId\r\n            let name = member.profile.data.userInfo.displayName\r\n            return getHistoricalStatsForAccount(name, id, type, ['general'])\r\n        })\r\n        Promise.all(memberStatsRequests)\r\n        .then(response => {\r\n            console.log(response)\r\n            let defaultMap = response.map(function(r){ \r\n                return {\r\n                    name: r.playerName,\r\n                    value: r.stats.mergedAllCharacters.results.allPvP.allTime.activitiesEntered.basic.value,\r\n                    displayValue: r.stats.mergedAllCharacters.results.allPvP.allTime.activitiesEntered.basic.displayValue,\r\n                }\r\n            })\r\n            let sortedStats = defaultMap.sort(function(a,b){return b.value-a.value})\r\n            this.setState({tableLoading: false, memberStats: response, tableStats: sortedStats})\r\n        })\r\n    }\r\n\r\n    sortData(newMode, newStat) {\r\n        let { memberStats, activeMode } = this.state\r\n        let stat = newStat\r\n        if (newMode.value !== activeMode.value) {\r\n            stat = newMode.value === 'allPvE' ? this.statPvEOptions[0] : this.statPvPOptions[0]\r\n        }\r\n        let statMap = memberStats.map(function(r){ \r\n            return {\r\n                name: r.playerName,\r\n                value: r.stats.mergedAllCharacters.results[newMode.value].allTime[stat.value].basic.value,\r\n                displayValue: r.stats.mergedAllCharacters.results[newMode.value].allTime[stat.value].basic.displayValue,\r\n            }\r\n        })\r\n        let sortedStats = statMap.sort(function(a,b){return b.value-a.value})\r\n        this.setState({activeMode: newMode, activeStat: stat, tableStats: sortedStats})\r\n    }\r\n\r\n    render() {\r\n\r\n        const { tableLoading, tableStats, activeMode, activeStat } = this.state\r\n        const { isLoading } = this.props\r\n\r\n        const statOptions = activeMode.value === 'allPvE' ? this.statPvEOptions : this.statPvPOptions\r\n\r\n        const stats = (\r\n            <div className='clan-stats'>\r\n                { isLoading || tableLoading ? \r\n                    <div className='loading'></div> \r\n                :\r\n                    <div className='clan-stats-content'>\r\n                        <div className='filter-bar'>\r\n                            <Dropdown key='mode' className='stat-dropdown' value={activeMode} options={this.modeOptions} onChange={m => this.sortData(m, activeStat)} />\r\n                            <Dropdown key='stat' className='stat-dropdown' value={activeStat} options={statOptions} onChange={s => this.sortData(activeMode, s)} />\r\n                        </div>\r\n                        <div className='stats-table-content'>\r\n                            {tableStats.map((member, i) => {\r\n                                return <MemberRow key={i} rank={i+1} name={member.name} count={member.displayValue} />\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n\r\n        return (stats);\r\n    }\r\n}\r\n\r\nClanStats.propTypes = {\r\n    children: PropTypes.node,\r\n    router: PropTypes.object,\r\n    location: PropTypes.object,\r\n    history: PropTypes.any\r\n}\r\n\r\nClanStats.contextTypes = {\r\n    router: PropTypes.object\r\n}\r\n\r\nexport default withRouter(ClanStats);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport Dropdown from 'react-dropdown';\r\nimport { getClan } from '../../utils/api';\r\nimport { getDate, formatDate } from '../../utils/utils';\r\n\r\nimport '../../style/ClanDetailsHeader.css';\r\n\r\nclass ClanDetailsHeader extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            clanDetail: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        getClan(this.props.groupId)\r\n        .then(response => {\r\n            this.setState({clanDetail: response.detail})\r\n        })\r\n    }\r\n\r\n    generateMonthList = () => {\r\n\r\n        let months = []\r\n\r\n        const currentDate = new Date()\r\n\r\n        for (let y = currentDate.getFullYear(); y >= 2017; y--) {\r\n            let m = 11\r\n            if (y === currentDate.getFullYear()) { m = currentDate.getMonth() }\r\n            let limit = 0\r\n            if (y === 2017) { limit = 8 }\r\n            for (m; m >= limit; m--) {\r\n                let date = getDate(m, y)\r\n                months.push({label: formatDate(date), value: date})\r\n            }\r\n        }\r\n\r\n        return months\r\n    }\r\n\r\n    navigateToPage(page) {\r\n        this.props.history.push(`/c/${this.props.groupId}/${page}`)\r\n    }\r\n\r\n    render() {\r\n        const { activeDate, changeDate, activePage } = this.props\r\n        const { clanDetail } = this.state\r\n\r\n        const dateString = formatDate(activeDate);\r\n        let months = this.generateMonthList()\r\n\r\n        const header = ( clanDetail ?\r\n            <div className='clan-details-header'>\r\n                <div className='clan-name-container'>\r\n                    <div className='clan-name'>{clanDetail.name}</div>\r\n                    <div className='clan-tag'>[{clanDetail.clanInfo.clanCallsign}]</div>\r\n                    {activePage === 'titles' ? <Dropdown className='month-dropdown' value={dateString} options={months} onChange={val => changeDate(val.value)} /> : null }\r\n                </div>\r\n                <div className='page-nav-container'>\r\n                        <div className={activePage === 'titles' ? 'page-switcher page-switcher-active' : 'page-switcher'} onClick={()=>this.navigateToPage('titles')}>Titles</div>\r\n                        <div className={activePage === 'stats' ? 'page-switcher page-switcher-active' : 'page-switcher'}  onClick={()=>this.navigateToPage('stats')}>Stats</div>\r\n                </div>\r\n            </div>\r\n        : null );\r\n\r\n        return (header);\r\n    }\r\n}\r\n\r\nClanDetailsHeader.propTypes = {\r\n    children: PropTypes.node,\r\n    router: PropTypes.object,\r\n    location: PropTypes.object,\r\n    history: PropTypes.any\r\n}\r\n\r\nClanDetailsHeader.contextTypes = {\r\n    router: PropTypes.object\r\n}\r\n\r\nexport default withRouter(ClanDetailsHeader);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getClanMembers, getProfile } from '../utils/api';\r\n\r\nimport '../style/ClanDetails.css';\r\n\r\nimport ClanTitles from './ClanTitles';\r\nimport ClanStats from './ClanStats';\r\n\r\nimport ClanDetailsHeader from '../components/ClanDetails/ClanDetailsHeader';\r\n\r\nclass ClanDetails extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            isLoading: true,\r\n            activeDate: new Date(),\r\n            memberProfiles: []\r\n        }\r\n\r\n        this.changeDate = this.changeDate.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        const { groupId } = this.props.match.params;\r\n\r\n        getClanMembers(groupId)\r\n        .then(response => {\r\n            // console.log(response.results)\r\n            let memberProfileRequests = response.results.map((member) => {\r\n                let type = member.destinyUserInfo.membershipType\r\n                let id = member.destinyUserInfo.membershipId\r\n                return getProfile(type, id, [100, 200])\r\n            })\r\n            Promise.all(memberProfileRequests)\r\n            .then(response => {\r\n                console.log(response)\r\n                this.setState({isLoading: false, memberProfiles: response})\r\n            })\r\n        })\r\n    }\r\n\r\n    changeDate(newDate) {\r\n        console.log('setting date: ', newDate)\r\n        this.setState({activeDate: newDate})\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isLoading, activeDate, memberProfiles } = this.state\r\n        const { groupId, page } = this.props.match.params;\r\n\r\n        const home = (\r\n            <div className='clan-details'>\r\n                <ClanDetailsHeader groupId={groupId} activeDate={activeDate} changeDate={this.changeDate} activePage={page} />\r\n                { page === 'titles' ? <ClanTitles isLoading={isLoading} activeDate={activeDate} memberProfiles={memberProfiles} /> : null }\r\n                { page === 'stats' ? <ClanStats isLoading={isLoading} activeDate={activeDate} memberProfiles={memberProfiles} /> : null }\r\n            </div>\r\n        );\r\n\r\n        return (home);\r\n    }\r\n}\r\n\r\nClanDetails.propTypes = {\r\n    children: PropTypes.node,\r\n    router: PropTypes.object,\r\n    location: PropTypes.object,\r\n    history: PropTypes.any\r\n}\r\n\r\nClanDetails.contextTypes = {\r\n    router: PropTypes.object\r\n}\r\n\r\nexport default withRouter(ClanDetails);","import React from 'react';\r\nimport { HashRouter, BrowserRouter } from 'react-router-dom';\r\nimport { Router, Route } from 'react-router';\r\n\r\nimport './style/App.css';\r\n\r\nimport Home from './pages/Home';\r\nimport ClanDetails from './pages/ClanDetails';\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n            <Route path=\"/\" exact component={Home} />\r\n            <Route path=\"/c/:groupId/:page\" component={ClanDetails} />\r\n            {/*<Footer />*/}\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './style/index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}